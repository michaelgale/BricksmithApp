#
# Uncrustify Configuration File
# File Created With UncrustifyX 0.4.3 (252)
#

# Alignment
# ---------

## Alignment

# Align on tabstop
align_on_tabstop                        = false         # boolean (false/true)

# Align with tabs
align_with_tabs                         = false         # boolean (false/true)

## Alignment Span

# Alignment span for #define bodies
align_pp_define_span                    = 3             # number

# Alignment span for assignment
align_assign_span                       = 1             # number

# Alignment span for equals in enums
align_enum_equ_span                     = 4             # number

# Alignment span for single-line typedefs
align_typedef_span                      = 5             # number

# Alignment span for struct initializer values
align_struct_init_span                  = 3             # number

# Alignment span for struct/union
align_var_struct_span                   = 99            # number

# Alignment span for trailing comments
align_right_cmt_span                    = 3             # number

# Alignment span for variable definitions
align_var_def_span                      = 1             # number

## Alignment Style

# Alignment style for star in variable definitions
align_var_def_star_style                = 1             # number

## Gap

# Minimum gap between label and value of preprocessor define
align_pp_define_gap                     = 4             # number

# Minimum gap between type and synonym of typedef
align_typedef_gap                       = 3             # number

## Limits

# Align on equals in assignments threshold
align_assign_thresh                     = 12            # number

# Align variable definitions threshold
align_var_def_thresh                    = 12            # number

## Other

# Align colon in struct bit fields
align_var_def_colon                     = true          # boolean (false/true)

# Align inline struct/enum/union variable definitions
align_var_def_inline                    = true          # boolean (false/true)

# Align macros wrapped with backslash and newline
align_nl_cont                           = true          # boolean (false/true)

# Blank Lines
# -----------

## Newline Count After

# Newline count after function body
nl_after_func_body                      = 3             # number

# Newline count after function prototype group
nl_after_func_proto_group               = 2             # number

# Newline count after variable definition block
nl_func_var_def_blk                     = 1             # number

## Newline Count Before

# Newline count before multi-line comment
nl_before_block_comment                 = 2             # number

## Other

# Maximum consecutive newlines
nl_max                                  = 3             # number

# Remove blank lines after open brace
eat_blanks_after_open_brace             = true          # boolean (false/true)

# Remove blank lines before close brace
eat_blanks_before_close_brace           = true          # boolean (false/true)

# Code-Modifying
# --------------

## Braces

# Braces on single-line do statement
mod_full_brace_do                       = add         # string (add/force/ignore/remove)

# Braces on single-line else statement
mod_full_brace_if                       = force         # string (add/force/ignore/remove)

# Braces on single-line for statement
mod_full_brace_for                      = force         # string (add/force/ignore/remove)

# Braces on single-line while statement
mod_full_brace_while                    = ignore         # string (add/force/ignore/remove)

## Parentheses

# Remove unnecessary parentheses on return statement
mod_paren_on_return                     = add           # string (add/force/ignore/remove)

# Comments
# --------

## Other

# Stars on multi-line comments
cmt_star_cont                           = true          # boolean (false/true)

# General
# -------

## Other

# Input tab size
input_tab_size                          = 2             # number

# Newline character
newlines                                = lf            # string (auto/cr/crlf/lf)

# Output tab size
output_tab_size                         = 2             # number

# Indentation
# -----------

## Indentation

# Indent class body
indent_class                            = true          # boolean (false/true)

## Indentation Size

# Indentation column size
indent_columns                          = 2             # number

# Indentation size between case and switch
indent_switch_case                      = 2             # number

## Other

indent_align_assign                     = false
# Align strings broken by backslash
indent_align_string                     = false         # boolean (false/true)

# Brace indent level
indent_brace                            = 0             # number

# Indent with tabs
indent_with_tabs                        = 0             # number

# Line-Splitting
# --------------

## Splitting

# Code width
code_width                              = 110           # number

# Split long function prototypes/calls at commas
ls_func_split_full                      = true          # boolean (false/true)

# Newlines
# --------

## Merging

# Change unbraced for statements into one-liner
nl_create_for_one_liner                 = true          # boolean (false/true)

# Change unbraced if statements into one-liner
nl_create_if_one_liner                  = true          # boolean (false/true)

# Change unbraced while statements into one-liner
nl_create_while_one_liner               = true          # boolean (false/true)

## Newline After

# Newline after brace open
nl_after_brace_open                     = false         # boolean (false/true)

# Newline after return
nl_after_return                         = true          # boolean (false/true)

## Newline Before

# Newline before case statement
nl_before_case                          = true          # boolean (false/true)

## Newline Between

# Newline between assignment and open brace
nl_assign_brace                         = add           # string (add/force/ignore/remove)

# Newline between close brace and else
nl_brace_else                           = force         # string (add/force/ignore/remove)

# Newline between close brace and while
nl_brace_while                          = remove        # string (add/force/ignore/remove)

# Newline between do and open brace
nl_do_brace                             = remove        # string (add/force/ignore/remove)

# Newline between else and open brace
nl_else_brace                           = remove        # string (add/force/ignore/remove)

# Newline between enum and open brace
nl_enum_brace                           = force         # string (add/force/ignore/remove)

# Newline between for and open brace
nl_for_brace                            = remove        # string (add/force/ignore/remove)

# Newline between function call and open brace
nl_fcall_brace                          = add           # string (add/force/ignore/remove)

# Newline between function signature and open brace
nl_fdef_brace                           = add           # string (add/force/ignore/remove)

# Newline between if and open brace
nl_if_brace                             = remove        # string (add/force/ignore/remove)

# Newline between struct and open brace
nl_struct_brace                         = remove        # string (add/force/ignore/remove)

# Newline between switch and open brace
nl_switch_brace                         = force         # string (add/force/ignore/remove)

# Newline between union and open brace
nl_union_brace                          = false         # string (add/force/ignore/remove)

# Newline between while and open brace
nl_while_brace                          = force         # string (add/force/ignore/remove)

## Other

# Blank lines after preprocessor if/else
nl_squeeze_ifdef                        = true          # boolean (false/true)

# Newline count at end of file
nl_end_of_file_min                      = 1             # number

# Newlines at end of file
nl_end_of_file                          = force         # string (add/force/ignore/remove)

# Newlines at start of file
nl_start_of_file                        = remove        # string (add/force/ignore/remove)

## Splitting

# Don't split one-line if/else statements
nl_if_leave_one_liners                  = true          # boolean (false/true)

# Positioning
# -----------

## Wrapped Expressions

# Position of boolean operators
pos_bool                                = trail         # string (ignore/lead/trail)

# Preprocessor
# ------------

## Indentation

# Indent preprocessor define
pp_define_at_level                      = false         # boolean (false/true)

# Indent preprocessor if/else/endif
pp_if_indent_code                       = false         # boolean (false/true)

# Indent preprocessor if/else/endif at level
pp_indent_at_level                      = false         # boolean (false/true)

# Spacing
# -------

## Space After

# Space after angle bracket
sp_after_angle                          = force         # string (add/force/ignore/remove)

# Space after cast
sp_after_cast                           = remove        # string (add/force/ignore/remove)

# Space after comma
sp_after_comma                          = force         # string (add/force/ignore/remove)

# Space after condition close parenthesis
sp_after_sparen                         = force         # string (add/force/ignore/remove)

# Space after pointer star
sp_after_ptr_star                       = remove        # string (add/force/ignore/remove)

sp_cond_colon                           = force
sp_cond_question                        = force
## Space Around

# Space around arithmetic operators
sp_arith                                = force         # string (add/force/ignore/remove)

# Space around assignment operator
sp_assign                               = force         # string (add/force/ignore/remove)

# Space around boolean operators
sp_bool                                 = force         # string (add/force/ignore/remove)

# Space around compare operators
sp_compare                              = force         # string (add/force/ignore/remove)

## Space Before

# Space before angle brackets
sp_before_angle                         = force         # string (add/force/ignore/remove)

# Space before case colon
sp_before_case_colon                    = force         # string (add/force/ignore/remove)

# Space before comma
sp_before_comma                         = remove        # string (add/force/ignore/remove)

# Space before if/for/switch/while open parenthesis
sp_before_sparen                        = force         # string (add/force/ignore/remove)

# Space before pointer star
sp_before_ptr_star                      = force         # string (add/force/ignore/remove)

# Space before pointer star followed by function
sp_before_ptr_star_func                 = force         # string (add/force/ignore/remove)

# Space before reference sign
sp_before_byref                         = remove        # string (add/force/ignore/remove)

# Space before semicolon
sp_before_semi                          = remove        # string (add/force/ignore/remove)

## Space Between

# Space between case and label
sp_case_label                           = force         # string (add/force/ignore/remove)

# Space between close brace and typedef name
sp_brace_typedef                        = force         # string (add/force/ignore/remove)

# Space between closing parenthesis and open brace
sp_fparen_brace                         = add           # string (add/force/ignore/remove)

# Space between constructor and open parenthesis
sp_func_class_paren                     = remove        # string (add/force/ignore/remove)

# Space between else and open brace
sp_else_brace                           = force         # string (add/force/ignore/remove)

# Space between function name and open parenthesis
sp_func_call_paren                      = remove        # string (add/force/ignore/remove)

# Space between function name and open parenthesis in declaration
sp_func_proto_paren                     = remove        # string (add/force/ignore/remove)

# Space between function name and open parenthesis in function definition
sp_func_def_paren                       = remove        # string (add/force/ignore/remove)

# Space between if/for/switch/while close parenthesis and open brace
sp_sparen_brace                         = force         # string (add/force/ignore/remove)

# Space between nested parentheses
sp_paren_paren                          = remove        # string (add/force/ignore/remove)

# Space between pointer stars
sp_between_ptr_star                     = remove        # string (add/force/ignore/remove)

# Space between return and open parenthesis
sp_return_paren                         = remove        # string (add/force/ignore/remove)

# Space between sizeof and open parenthesis
sp_sizeof_paren                         = remove        # string (add/force/ignore/remove)

## Space Inside

# Space inside angle brackets
sp_inside_angle                         = remove        # string (add/force/ignore/remove)

# Space inside braces
sp_inside_braces                        = force         # string (add/force/ignore/remove)

# Space inside enum braces
sp_inside_braces_enum                   = force         # string (add/force/ignore/remove)

# Space inside function parentheses
sp_inside_fparen                        = remove        # string (add/force/ignore/remove)

# Space inside if-condition parentheses
sp_inside_sparen                        = remove        # string (add/force/ignore/remove)

# Space inside non-empty square brackets
sp_inside_square                        = remove        # string (add/force/ignore/remove)

# Space inside parentheses
sp_inside_paren                         = remove        # string (add/force/ignore/remove)

# Space inside struct/union braces
sp_inside_braces_struct                 = force         # string (add/force/ignore/remove)

sp_cmt_cpp_start                        = force        # string (add/force/ignore/remove)

sp_catch_brace               = add
sp_catch_paren               = add

# Objective-C specifics      
sp_inside_oc_at_sel_parens   = remove
sp_after_class_colon         = force
sp_before_class_colon        = force
sp_before_oc_colon           = remove
sp_after_oc_colon            = remove
sp_after_oc_scope            = force
sp_after_oc_type             = remove
sp_after_oc_return_type      = remove
sp_before_send_oc_colon      = remove
sp_after_send_oc_colon       = remove
sp_after_oc_at_sel           = remove
sp_before_oc_block_caret     = ignore
sp_after_oc_block_caret      = remove
sp_after_oc_dict_colon       = force
sp_after_oc_property         = force
sp_before_oc_dict_colon      = remove
nl_oc_msg_args               = true
sp_after_oc_msg_receiver     = force

nl_oc_before_interface       = force
nl_oc_before_implementation  = force
nl_oc_before_end             = force

align_oc_msg_colon_first     = false
align_oc_msg_colon_span      = 1         # align parameters in an Obj-C message on the ':' but stop after this many lines (0=don't align)
align_oc_msg_spec_span       = 0         # the span for aligning ObjC msg spec (0=don't align)

align_right_cmt_span          = 8
align_right_cmt_gap           = 8

cmt_c_nl_start = true
cmt_cpp_nl_start = true

nl_oc_msg_leave_one_liner = true
